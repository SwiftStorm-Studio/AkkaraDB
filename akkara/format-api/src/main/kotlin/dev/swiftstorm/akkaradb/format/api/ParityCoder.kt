/*
 * AkkaraDB
 * Copyright (C) 2025 Swift Storm Studio
 *
 * This file is part of AkkaraDB.
 *
 * AkkaraDB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * AkkaraDB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with AkkaraDB.  If not, see <https://www.gnu.org/licenses/>.
 */

package dev.swiftstorm.akkaradb.format.api

import dev.swiftstorm.akkaradb.common.ByteBufferL

/**
 * Abstraction for parity coding in AkkaraDB stripes.
 *
 * A [ParityCoder] is responsible for generating parity blocks from a set of data blocks
 * and for reconstructing missing blocks when failures occur.
 *
 * ### Responsibilities
 * - **Encoding**: Given `k` data blocks, compute `m` parity blocks that can be used
 *   to tolerate up to `m` concurrent block/lane losses.
 * - **Decoding**: Reconstruct a missing data block from the available data blocks and
 *   the parity blocks.
 *
 * Implementations include:
 * - XOR, DualXor (for m = 1 or 2)
 * - Reed–Solomon over GF(2^8) (for m ≥ 3)
 *
 * All blocks are fixed-size (e.g., 32 KiB).
 */
interface ParityCoder {

    /**
     * The number of parity blocks (m) generated by this coder.
     *
     * - `m = 0`: no redundancy
     * - `m = 1`: XOR
     * - `m = 2`: DualXor
     * - `m ≥ 3`: Reed–Solomon
     */
    val parityCount: Int

    /**
     * Encodes the given data blocks into parity blocks.
     *
     * @param dataBlocks list of `k` data blocks, each with identical fixed size
     * @return list of `m` parity blocks, each of the same size as a data block
     * @throws IllegalArgumentException if block sizes are inconsistent or empty
     */
    fun encode(dataBlocks: List<ByteBufferL>): List<ByteBufferL>

    /**
     * Decodes a missing data block using available data and parity.
     *
     * @param lostIndex index of the missing data block (0-based in the data lane array)
     * @param presentData list of data blocks (`null` for missing entries)
     * @param presentParity list of parity blocks (`null` for missing parity entries)
     * @return reconstructed data block corresponding to [lostIndex]
     * @throws IllegalArgumentException if too many blocks are missing to recover
     */
    fun decode(
        lostIndex: Int,
        presentData: List<ByteBufferL?>,
        presentParity: List<ByteBufferL?>
    ): ByteBufferL
}
